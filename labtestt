#include <iostream>
#ifndef MY_MATH_FUNCTIONS_H
#define MY_MATH_FUNCTIONS_H
#endif

#include <cmath>

using namespace std;

double f(double x)
{
    return 3 * x - cos(x) - 1;
}

double bisection(double a, double b, double tol)
{
    if (f(a) * f(b) >= 0)
    {
        cout << "Bisection method cannot guarantee a root within the given interval." << endl;
        return -1;
    }

    double c;

    while ((b - a) >= tol)
    {

        c = (a + b) / 2;

        if (f(c) == 0.0)
            break;

        if (f(c) * f(a) < 0)
            b = c;
        else
            a = c;
    }

    return c;
}

int main()
{
    double a, b, tol;

    cout << "Enter the interval [a, b]: ";
    cin >> a >> b;

    cout << "Enter the tolerance (e.g., 0.0001): ";
    cin >> tol;

    double root = bisection(a, b, tol);

    if (root != -1)
    {
        cout << "The root is approximately: " << root << endl;
    }

    return 0;
}


#include <iostream>
#include <cmath>

using namespace std;

double f(double x)
{

    return x * x - 3 * x + 2;
}

double df(double x)
{

    return 2 * x - 3;
}

double newtonRaphson(double initialGuess, double tolerance, int maxIterations)
{
    double x = initialGuess;
    int iteration = 0;

    while (iteration < maxIterations)
    {
        double delta = f(x) / df(x);
        x -= delta;

        if (abs(delta) < tolerance)
        {
            return x;
        }

        iteration++;
    }

    return x;
}

int main()
{
    double initialGuess;
    double tolerance;
    int maxIterations;

    cout << "Enter initial guess: ";
    cin >> initialGuess;

    cout << "Enter tolerance: ";
    cin >> tolerance;

    cout << "Enter maximum number of iterations: ";
    cin >> maxIterations;

    double root = newtonRaphson(initialGuess, tolerance, maxIterations);

    cout << "Approximate root: " << root << endl;

    return 0;
}



#include <iostream>
#include <math.h>

#define f(x) 1 / (1 + pow(x, 2))

using namespace std;
int main()
{
    float lower, upper, integration = 0.0, stepSize, k; // step size= usase of step size  h=stepsize
    int i, subInterval;

    cout << "Enter lower limit of integration: ";
    cin >> lower;
    cout << "Enter upper limit of integration: ";
    cin >> upper;
    cout << "Enter number of sub intervals: ";
    cin >> subInterval;

    stepSize = (upper - lower) / subInterval;

    integration = f(lower) + f(upper);

    for (i = 1; i <= subInterval - 1; i++)
    {
        k = lower + i * stepSize;
        integration = integration + 2 * (f(k));
    }

    integration = integration * stepSize / 2;

    cout << endl
         << "Required value of integration is: " << integration;

    return 0;
}
/*
#include<bits/stdc++.h>
using namespace std;
#define function(x) (1/(1+(x*x)))
int main()
{
    double lowerLimit, upperLimit, h;
    cout << "Lower Limit:";
    cin >> lowerLimit;
    cout << "Upper Limit:";
    cin >> upperLimit;
    cout << "H:" ;
    cin >> h;
    double sum = 0.0;
    for(double i=lowerLimit;i<=upperLimit;i+=h){
        if(i == lowerLimit || i==upperLimit){
            sum += ((h*function(i))/2);
        }else{
            sum += (h*function(i));
        }
    }
    cout << "Integration of that funtion is " << sum << '\n';
    return 0;
}
*/